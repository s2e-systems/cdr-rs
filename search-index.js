var N=null,E="",T="t",U="u",searchIndex={};
var r_0a="read_u64_into",r_1a="read_u128_into",r_2a="write_u16_into",r_3a="write_u32_into",r_4a="write_u64_into",r_5a="write_u128_into",r_6a="from_slice_u16",r_7a="from_slice_u32",r_8a="from_slice_u64",r_9a="from_slice_u128",r_Aa="from",r_Ba="cdr::de",r_Ca="into",r_Da="cdr::ser",r_Ea="cdr::size",r_Fa="cdr",r_Ga="clone",r_Ha="littleendian",r_Ia="partial_cmp",r_Ja="bigendian",r_Ka="ordering",r_La="default",r_Ma="read_u16",r_Na="read_u32",r_Oa="read_u64",r_Pa="read_u128",r_Qa="read_uint",r_Ra="read_uint128",r_Sa="write_u16",r_Ta="write_u32",r_Ua="write_u64",r_Va="write_u128",r_Wa="write_uint",r_Xa="write_uint128",r_Ya="read_u16_into",r_Za="read_u32_into",r_aa="result",r_ab="from_slice_f32",r_ba="Deserializer",r_bb="from_slice_f64",r_ca="A deserializer that reads bytes from a buffer.",r_cb="formatter",r_da="Deserializes a slice of bytes into an object.",r_db="error",r_ea="Deserializes an object directly from a `Read`.",r_eb="bool",r_fa="Serializer",r_fb="bounded",r_ga="A serializer that writes values into a buffer.",r_gb="cdrbe",r_ha="Bounded",r_hb="cdrle",r_ia="A `SizeLimit` that restricts serialized or deserialized…",r_ib="plcdrbe",r_ja="Infinite",r_jb="plcdrle",r_ka="A `SizeLimit` without a limit.",r_kb="infinite",r_la="Given a maximum size limit, check how large an object…",r_lb="fmt",r_ma="u64",r_mb="hash",r_na="SizeLimit",r_nb="custom",r_oa="self",r_ob="Error",r_pa="option",r_pb="Encapsulation",r_qa="Limits on the number of bytes that can be read or written.",r_qb="BigEndian",r_ra="limit",r_rb="LittleEndian",r_sa="to_owned",r_sb="CdrBe",r_ta="clone_into",r_tb="CdrLe",r_ua="try_from",r_ub="PlCdrBe",r_va="borrow",r_vb="PlCdrLe",r_wa="get_type_id",r_xa="typeid",r_ya="try_into",r_za="borrow_mut";

searchIndex[r_Fa]={"doc":"A serialization/deserialization implementation for Common…","i":[[4,r_qb,r_Fa,"Defines big-endian serialization.",N,N],[4,r_rb,E,"Defines little-endian serialization.",N,N],[3,r_ba,E,r_ca,N,N],[3,r_fa,E,r_ga,N,N],[3,r_ha,E,r_ia,N,N],[12,"0",E,E,0,N],[3,r_ja,E,r_ka,N,N],[4,r_sb,E,"OMG CDR big-endian encapsulation.",N,N],[4,r_tb,E,"OMG CDR little-endian encapsulation.",N,N],[4,r_ub,E,"ParameterList encapsulated using OMG CDR big-endian…",N,N],[4,r_vb,E,"ParameterList encapsulated using OMG CDR little-endian…",N,N],[4,r_ob,E,"The Error type.",N,N],[13,"Message",E,E,1,N],[13,"Io",E,E,1,N],[13,"DeserializeAnyNotSupported",E,E,1,N],[13,"InvalidBoolEncoding",E,E,1,N],[13,"InvalidChar",E,E,1,N],[13,"InvalidCharEncoding",E,E,1,N],[13,"InvalidEncapsulation",E,E,1,N],[13,"InvalidUtf8Encoding",E,E,1,N],[13,"NumberOutOfRange",E,E,1,N],[13,"SequenceMustHaveLength",E,E,1,N],[13,r_na,E,E,1,N],[13,"TypeNotSupported",E,E,1,N],[5,"calc_serialized_size",E,"Returns the size that an object would be if serialized…",N,[[[T]],[r_ma]]],[5,"calc_serialized_size_bounded",E,r_la,N,[[[T],[r_ma]],[r_aa,[r_ma]]]],[5,"serialize",E,"Serializes a serializable object into a `Vec` of bytes…",N,[[[T],["s"]],[r_aa,["vec"]]]],[5,"serialize_into",E,"Serializes an object directly into a `Write` with the…",N,[[["w"],[T],["s"]],[r_aa]]],[5,"deserialize",E,r_da,N,N],[5,"deserialize_from",E,r_ea,N,[[["r"],["s"]],[r_aa]]],[0,"de",E,"Deserializing CDR into Rust data types.",N,N],[3,r_ba,r_Ba,r_ca,N,N],[5,"deserialize_data",E,r_da,N,N],[5,"deserialize_data_from",E,r_ea,N,[[["r"],["s"]],[r_aa]]],[11,"new",E,E,2,[[["r"],["s"]],[r_oa]]],[0,"ser",r_Fa,"Serializing Rust data types into CDR.",N,N],[3,r_fa,r_Da,r_ga,N,N],[5,"serialize_data",E,"Serializes a serializable object into a `Vec` of bytes.",N,[[[T],["s"]],[r_aa,["vec"]]]],[5,"serialize_data_into",E,"Serializes an object directly into a `Write`.",N,[[["w"],[T],["s"]],[r_aa]]],[11,"new",E,E,3,[[["w"]],[r_oa]]],[0,"size",r_Fa,"Measuring the size of (de)serialized data.",N,N],[3,r_ha,r_Ea,r_ia,N,N],[12,"0",E,E,0,N],[3,r_ja,E,r_ka,N,N],[5,"calc_serialized_data_size",E,"Returns the size that an object would be if serialized.",N,[[[T]],[r_ma]]],[5,"calc_serialized_data_size_bounded",E,r_la,N,[[[T],[r_ma]],[r_aa,[r_ma]]]],[8,r_na,E,r_qa,N,N],[10,"add",E,E,4,[[[r_oa],[r_ma]],[r_aa]]],[10,r_ra,E,E,4,[[[r_oa]],[r_pa,[r_ma]]]],[6,"Result",r_Fa,"Convenient wrapper around `std::Result`.",N,N],[8,r_pb,E,"Data encapsulation scheme identifiers.",N,N],[16,"E",E,E,5,N],[10,"id",E,E,5,N],[11,r_pa,E,E,5,N],[8,r_na,E,r_qa,N,N],[10,"add",E,E,4,[[[r_oa],[r_ma]],[r_aa]]],[10,r_ra,E,E,4,[[[r_oa]],[r_pa,[r_ma]]]],[11,r_Aa,E,E,6,[[[T]],[T]]],[11,r_Ca,E,E,6,[[[r_oa]],[U]]],[11,r_sa,E,E,6,[[[r_oa]],[T]]],[11,r_ta,E,E,6,N],[11,r_ua,E,E,6,[[[U]],[r_aa]]],[11,r_va,E,E,6,[[[r_oa]],[T]]],[11,r_wa,E,E,6,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,6,[[[r_oa]],[r_aa]]],[11,r_za,E,E,6,[[[r_oa]],[T]]],[11,r_Aa,E,E,7,[[[T]],[T]]],[11,r_Ca,E,E,7,[[[r_oa]],[U]]],[11,r_sa,E,E,7,[[[r_oa]],[T]]],[11,r_ta,E,E,7,N],[11,r_ua,E,E,7,[[[U]],[r_aa]]],[11,r_va,E,E,7,[[[r_oa]],[T]]],[11,r_wa,E,E,7,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,7,[[[r_oa]],[r_aa]]],[11,r_za,E,E,7,[[[r_oa]],[T]]],[11,r_Aa,r_Ba,E,2,[[[T]],[T]]],[11,r_Ca,E,E,2,[[[r_oa]],[U]]],[11,r_ua,E,E,2,[[[U]],[r_aa]]],[11,r_va,E,E,2,[[[r_oa]],[T]]],[11,r_wa,E,E,2,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,2,[[[r_oa]],[r_aa]]],[11,r_za,E,E,2,[[[r_oa]],[T]]],[11,r_Aa,r_Da,E,3,[[[T]],[T]]],[11,r_Ca,E,E,3,[[[r_oa]],[U]]],[11,r_ua,E,E,3,[[[U]],[r_aa]]],[11,r_va,E,E,3,[[[r_oa]],[T]]],[11,r_wa,E,E,3,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,3,[[[r_oa]],[r_aa]]],[11,r_za,E,E,3,[[[r_oa]],[T]]],[11,r_Aa,r_Ea,E,0,[[[T]],[T]]],[11,r_Ca,E,E,0,[[[r_oa]],[U]]],[11,r_sa,E,E,0,[[[r_oa]],[T]]],[11,r_ta,E,E,0,N],[11,r_ua,E,E,0,[[[U]],[r_aa]]],[11,r_va,E,E,0,[[[r_oa]],[T]]],[11,r_wa,E,E,0,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,0,[[[r_oa]],[r_aa]]],[11,r_za,E,E,0,[[[r_oa]],[T]]],[11,r_Aa,E,E,8,[[[T]],[T]]],[11,r_Ca,E,E,8,[[[r_oa]],[U]]],[11,r_sa,E,E,8,[[[r_oa]],[T]]],[11,r_ta,E,E,8,N],[11,r_ua,E,E,8,[[[U]],[r_aa]]],[11,r_va,E,E,8,[[[r_oa]],[T]]],[11,r_wa,E,E,8,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,8,[[[r_oa]],[r_aa]]],[11,r_za,E,E,8,[[[r_oa]],[T]]],[11,r_Aa,r_Fa,E,9,[[[T]],[T]]],[11,r_Ca,E,E,9,[[[r_oa]],[U]]],[11,r_sa,E,E,9,[[[r_oa]],[T]]],[11,r_ta,E,E,9,N],[11,r_ua,E,E,9,[[[U]],[r_aa]]],[11,r_va,E,E,9,[[[r_oa]],[T]]],[11,r_wa,E,E,9,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,9,[[[r_oa]],[r_aa]]],[11,r_za,E,E,9,[[[r_oa]],[T]]],[11,r_Aa,E,E,10,[[[T]],[T]]],[11,r_Ca,E,E,10,[[[r_oa]],[U]]],[11,r_sa,E,E,10,[[[r_oa]],[T]]],[11,r_ta,E,E,10,N],[11,r_ua,E,E,10,[[[U]],[r_aa]]],[11,r_va,E,E,10,[[[r_oa]],[T]]],[11,r_wa,E,E,10,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,10,[[[r_oa]],[r_aa]]],[11,r_za,E,E,10,[[[r_oa]],[T]]],[11,r_Aa,E,E,11,[[[T]],[T]]],[11,r_Ca,E,E,11,[[[r_oa]],[U]]],[11,r_sa,E,E,11,[[[r_oa]],[T]]],[11,r_ta,E,E,11,N],[11,r_ua,E,E,11,[[[U]],[r_aa]]],[11,r_va,E,E,11,[[[r_oa]],[T]]],[11,r_wa,E,E,11,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,11,[[[r_oa]],[r_aa]]],[11,r_za,E,E,11,[[[r_oa]],[T]]],[11,r_Aa,E,E,12,[[[T]],[T]]],[11,r_Ca,E,E,12,[[[r_oa]],[U]]],[11,r_sa,E,E,12,[[[r_oa]],[T]]],[11,r_ta,E,E,12,N],[11,r_ua,E,E,12,[[[U]],[r_aa]]],[11,r_va,E,E,12,[[[r_oa]],[T]]],[11,r_wa,E,E,12,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,12,[[[r_oa]],[r_aa]]],[11,r_za,E,E,12,[[[r_oa]],[T]]],[11,r_Aa,E,E,1,[[[T]],[T]]],[11,r_Ca,E,E,1,[[[r_oa]],[U]]],[11,"to_string",E,E,1,[[[r_oa]],["string"]]],[11,r_ua,E,E,1,[[[U]],[r_aa]]],[11,r_va,E,E,1,[[[r_oa]],[T]]],[11,r_wa,E,E,1,[[[r_oa]],[r_xa]]],[11,r_ya,E,E,1,[[[r_oa]],[r_aa]]],[11,r_za,E,E,1,[[[r_oa]],[T]]],[11,r_Ga,E,E,6,[[[r_oa]],[r_Ja]]],[11,r_Ga,E,E,7,[[[r_oa]],[r_Ha]]],[11,r_Ia,E,E,7,[[[r_oa],[r_Ha]],[r_pa,[r_Ka]]]],[11,r_Ia,E,E,6,[[[r_oa],[r_Ja]],[r_pa,[r_Ka]]]],[11,"cmp",E,E,7,[[[r_oa],[r_Ha]],[r_Ka]]],[11,"cmp",E,E,6,[[[r_oa],[r_Ja]],[r_Ka]]],[11,r_La,E,E,6,[[],[r_Ja]]],[11,r_La,E,E,7,[[],[r_Ha]]],[11,"eq",E,E,6,[[[r_oa],[r_Ja]],[r_eb]]],[11,"eq",E,E,7,[[[r_oa],[r_Ha]],[r_eb]]],[11,r_Ma,E,E,6,N],[11,r_Na,E,E,6,N],[11,r_Oa,E,E,6,N],[11,r_Pa,E,E,6,N],[11,r_Qa,E,E,6,N],[11,r_Ra,E,E,6,N],[11,r_Sa,E,E,6,N],[11,r_Ta,E,E,6,N],[11,r_Ua,E,E,6,N],[11,r_Va,E,E,6,N],[11,r_Wa,E,E,6,N],[11,r_Xa,E,E,6,N],[11,r_Ya,E,E,6,N],[11,r_Za,E,E,6,N],[11,r_0a,E,E,6,N],[11,r_1a,E,E,6,N],[11,r_2a,E,E,6,N],[11,r_3a,E,E,6,N],[11,r_4a,E,E,6,N],[11,r_5a,E,E,6,N],[11,r_6a,E,E,6,N],[11,r_7a,E,E,6,N],[11,r_8a,E,E,6,N],[11,r_9a,E,E,6,N],[11,r_ab,E,E,6,N],[11,r_bb,E,E,6,N],[11,r_Ma,E,E,7,N],[11,r_Na,E,E,7,N],[11,r_Oa,E,E,7,N],[11,r_Pa,E,E,7,N],[11,r_Qa,E,E,7,N],[11,r_Ra,E,E,7,N],[11,r_Sa,E,E,7,N],[11,r_Ta,E,E,7,N],[11,r_Ua,E,E,7,N],[11,r_Va,E,E,7,N],[11,r_Wa,E,E,7,N],[11,r_Xa,E,E,7,N],[11,r_Ya,E,E,7,N],[11,r_Za,E,E,7,N],[11,r_0a,E,E,7,N],[11,r_1a,E,E,7,N],[11,r_2a,E,E,7,N],[11,r_3a,E,E,7,N],[11,r_4a,E,E,7,N],[11,r_5a,E,E,7,N],[11,r_6a,E,E,7,N],[11,r_7a,E,E,7,N],[11,r_8a,E,E,7,N],[11,r_9a,E,E,7,N],[11,r_ab,E,E,7,N],[11,r_bb,E,E,7,N],[11,r_lb,E,E,7,[[[r_oa],[r_cb]],[r_aa,[r_db]]]],[11,r_lb,E,E,6,[[[r_oa],[r_cb]],[r_aa,[r_db]]]],[11,r_mb,E,E,6,N],[11,r_mb,E,E,7,N],[11,"id",E,E,9,N],[11,"id",E,E,10,N],[11,"id",E,E,11,N],[11,"id",E,E,12,N],[11,"add",r_Ea,E,0,[[[r_oa],[r_ma]],[r_aa]]],[11,r_ra,E,E,0,[[[r_oa]],[r_pa,[r_ma]]]],[11,"add",E,E,8,[[[r_oa],[r_ma]],[r_aa]]],[11,r_ra,E,E,8,[[[r_oa]],[r_pa,[r_ma]]]],[11,r_Aa,r_Ba,E,2,[[["deserializer",[r_Ja]]],[r_oa]]],[11,r_Aa,r_Fa,E,1,[[[r_db]],[r_oa]]],[11,"eq",E,E,9,[[[r_oa],[r_gb]],[r_eb]]],[11,"eq",E,E,10,[[[r_oa],[r_hb]],[r_eb]]],[11,"eq",E,E,11,[[[r_oa],[r_ib]],[r_eb]]],[11,"eq",E,E,12,[[[r_oa],[r_jb]],[r_eb]]],[11,"eq",r_Ea,E,0,[[[r_oa],[r_fb]],[r_eb]]],[11,"ne",E,E,0,[[[r_oa],[r_fb]],[r_eb]]],[11,"eq",E,E,8,[[[r_oa],[r_kb]],[r_eb]]],[11,r_Ga,r_Fa,E,9,[[[r_oa]],[r_gb]]],[11,r_Ga,E,E,10,[[[r_oa]],[r_hb]]],[11,r_Ga,E,E,11,[[[r_oa]],[r_ib]]],[11,r_Ga,E,E,12,[[[r_oa]],[r_jb]]],[11,r_Ga,r_Ea,E,0,[[[r_oa]],[r_fb]]],[11,r_Ga,E,E,8,[[[r_oa]],[r_kb]]],[11,r_lb,r_Fa,E,9,[[[r_oa],[r_cb]],[r_aa]]],[11,r_lb,E,E,10,[[[r_oa],[r_cb]],[r_aa]]],[11,r_lb,E,E,11,[[[r_oa],[r_cb]],[r_aa]]],[11,r_lb,E,E,12,[[[r_oa],[r_cb]],[r_aa]]],[11,r_lb,E,E,1,[[[r_oa],[r_cb]],[r_aa]]],[11,r_lb,r_Ea,E,0,[[[r_oa],[r_cb]],[r_aa]]],[11,r_lb,E,E,8,[[[r_oa],[r_cb]],[r_aa]]],[11,r_mb,r_Fa,E,9,N],[11,r_mb,E,E,10,N],[11,r_mb,E,E,11,N],[11,r_mb,E,E,12,N],[11,r_mb,r_Ea,E,0,N],[11,r_mb,E,E,8,N],[11,r_lb,r_Fa,E,1,[[[r_oa],[r_cb]],[r_aa]]],[11,"description",E,E,1,[[[r_oa]],["str"]]],[11,"cause",E,E,1,[[[r_oa]],[r_pa,[r_db]]]],[11,r_nb,E,E,1,[[[T]],[r_oa]]],[11,r_nb,E,E,1,[[[T]],[r_oa]]],[11,r_pa,E,E,5,N]],"p":[[3,r_ha],[4,r_ob],[3,r_ba],[3,r_fa],[8,r_na],[8,r_pb],[4,r_qb],[4,r_rb],[3,r_ja],[4,r_sb],[4,r_tb],[4,r_ub],[4,r_vb]]};
initSearch(searchIndex);addSearchOptions(searchIndex);